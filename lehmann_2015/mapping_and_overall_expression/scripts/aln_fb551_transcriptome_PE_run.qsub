#!/bin/bash
#PBS -M jfear@ufl.edu
#PBS -m n
#PBS -q bio
#PBS -r n
#PBS -j oe
#PBS -o /bio/mcintyre/cegs/scripts/PBS_LOGS/aln_fb551_transcriptome/
#PBS -l walltime=11:00:00
#PBS -l nodes=1:ppn=4
#PBS -l pmem=8gb

module load bowtie/0.12.8
module load last/247
module load python/2.7.3

## Set current USERNAME who is running the script
    USER=jfear

## Store number of processors that will be used, i.e. the number of files we will split into to run LAST on
    NUMPROCS=4

## Set Directories
    PROJ=/bio/mcintyre/cegs
    ORIG=$PROJ/original_data/transcriptome
    LINE=r109
    MV=M
    REP=1

    NAME=${LINE}_${MV}${REP}

## Set Different References
    REF=/bio/mcintyre/references/dmel_fb551/dmel-all-transcript-r5.51_BT1
    LASTREF=/bio/mcintyre/references/dmel_fb551/dmel-all-transcript-r5.51_LAST

## Create Necessary Folders
    OUTPUT=$PROJ/aln_fb551_transcriptome_pe
    if [ ! -e $OUTPUT ]; then mkdir -p $OUTPUT; fi

    # Create LOG directory and start log
        LOGS=$OUTPUT/job_logs 
        ALN_ERROR_LOG=$LOGS/size_errors.txt
        if [ ! -d $LOGS ]; then mkdir -p $LOGS; fi

        MYLOG=$LOGS/${LINE}_${MV}${REP}.log
        printf "`date` $LINE $MV $REP PBS_ARRAYID:$PBS_ARRAYID HOSTNAME:$HOSTNAME\n" > $MYLOG

    # Select TMPDIR
        # Create a temporary folder to do everything in. If you comment this section
        # out, script will use node's local TMPDIR
        SIZE=`df /local/scratch/ | grep -v "Filesystem" | awk '{print $4}'`
        FLAG_SCRATCH=0
        #SIZE=1

        if [ $SIZE -lt 20000000 ]
        then 
            echo "TMPDIR full, moving to SCRATCH">>$MYLOG
            TMPDIR=/scratch/hpc/$USER/tmp/aln_fb551_transcriptome_$PBS_ARRAYID
            if [ ! -d $TMPDIR ]; then mkdir -p $TMPDIR; fi
            FLAG_SCRATCH=1
        fi

    # Create ALN LOG directory and start log
        ALNLOGS=$OUTPUT/aln_logs 
        if [ ! -d $ALNLOGS ]; then mkdir -p $ALNLOGS; fi
        printf "\----tmpdir: $TMPDIR \n"> $MYLOG


### FUNCTIONS FOR ALIGNMENT PIPELINE ###
    function check_bowtie {

        echo "START Bowtie Size Checker [`date`]" >>$MYLOG
        # Do a size check and store the result in VAR
        VAR=`/bio/mcintyre/pipeline_dev/scripts/SizeChecker.py -i $READS -aln $ALN -unaln $UNALN`

        # Check VAR; if it is -1, then bowtie produced a different output size than input size

        if [[ $VAR -eq -1 ]]
        then
            echo $NAME "- WARNING: Bowtie input/output size inconsistent \n" >>$ALN_ERROR_LOG
        fi

        echo "FINISH Bowtie Size Checker [`date`]" >>$MYLOG
    }

    function bowtie_se_all {
        cd $TMPDIR

        echo "START Single End bowtie [`date`]" >>$MYLOG
        bowtie -S \
               --solexa1.3-quals \
               --best \
               --tryhard \
               --strata \
               --chunkmbs 1024 \
               -p $NUMPROCS \
               -a \
               -v 3 \
               --un ${NAME}_unaln_bt.fq \
               $REF \
               $READS \
               2>$ALNLOGS/${NAME}_bowtie.log \
               | perl -ne 'if(/^@/){next} @s = split; if($s[1] != 4) {print}' \
               > ${NAME}_aln_bt.sam \
               2>>$MYLOG
            echo "FINISH Single End bowtie [`date`]" >>$MYLOG

            if [ ! -e ${NAME}_unaln_bt.fq ]
            then
                echo "WARNING: There were no unaligned reads" >> $MYLOG
            fi

            ALN=${NAME}_aln_bt.sam

            UNALN=UNALN.fq
            cat ${NAME}_unaln_bt.fq > $UNALN
            
            check_bowtie

            READS=${NAME}_unaln_bt.fq
            rm $UNALN

    }

    function bowtie_pe_all {
        cd $TMPDIR

        echo "START Paired End bowtie [`date`]" >>$MYLOG
        bowtie -S \
               --solexa1.3-quals \
               --best \
               --tryhard \
               --strata \
               --chunkmbs 1024 \
               -p $NUMPROCS \
               -a  \
               -v 3 \
               --un ${NAME}_unaln_bt.fq \
               $REF \
               -1 $READ1 \
               -2 $READ2 \
               2>$ALNLOGS/${NAME}_bowtie.log \
               | perl -ne 'if(/^@/){next} @s = split; if($s[1] != 77 && $s[1] != 141) {print}' \
               >${NAME}_aln_bt.sam \
               2>>$MYLOG
            echo "FINISH Paired End bowtie [`date`]" >>$MYLOG

            if [ ! -e ${NAME}_unaln_bt_1.fq ] || [ ! -e ${NAME}_unaln_bt_2.fq ]
            then
                echo "WARNING: There were no unaligned reads" >> $MYLOG
            fi

            READS=READS.fq
            cat $READ1 $READ2 > $READS

            ALN=${NAME}_aln_bt.sam

            UNALN=UNALN.fq
            cat ${NAME}_unaln_bt_*.fq > $UNALN

            du -sh *.fq >>$MYLOG
            
            check_bowtie
            rm $UNALN $READS

            READ1=${NAME}_unaln_bt_1.fq
            READ2=${NAME}_unaln_bt_2.fq
    }

    function last_se_all {
        cd $TMPDIR

        # The following Python script turns READS into NUMPROCS separate files, going from 0-split.fq to (NUMPROCS-1)-split.fq. 
        # READS is the location where the output files are placed

            python /bio/mcintyre/pipeline_dev/scripts/Separate_Last.py $READS $NUMPROCS 4 
            rm $READS

        # START LAST for each of the NUMPROCS new -split files
            echo "START Single End LAST [`date`]" >>$MYLOG
            for ((I=0; I<$NUMPROCS; I++))
            do
                    READS=${I}-split.fq

                    lastal \
                        -l 25 \
                        -Q 3 \
                        $LASTREF \
                        $READS \
                        2>>$MYLOG \
                        >${I}_last.maf &
            done
            wait

            echo "FINISH Single End LAST [`date`]" >>$MYLOG

            rm *-split.fq

        # Convert MAF to SAM
            echo "START Converting from MAF to SAM [`date`]" >>$MYLOG
            for ((I=0; I<$NUMPROCS; I++))
            do
                maf-convert.py sam ${I}_last.maf > ${I}_last.sam 2>>$MYLOG &
            done
            wait

            rm *_last.maf

            echo "FINISH Converting to SAM [`date`]" >>$MYLOG

            for ((I=0; I<$NUMPROCS; I++))
            do
                cat ${I}_last.sam >> ${NAME}_last.sam
                rm ${I}_last.sam
            done

        # PARSE LAST FILES
            echo "START Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG
            perl /bio/mcintyre/sem_gof/scripts/parse_last_sam_v2.pl \
                ${NAME}_last.sam \
                ${NAME}_ambig_last.sam \
                ${NAME}_uniq_last.sam \
                > $ALNLOGS/${NAME}_LAST.log

            rm ${NAME}_last.sam 

            echo "FINISH Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG

    }

    function last_pe_all {
        cd $TMPDIR

        # The following Python script turns READS into NUMPROCS separate files, going from 0-split.fq to (NUMPROCS-1)-split.fq. 
        # READS is the location where the output files are placed

            python /bio/mcintyre/pipeline_dev/scripts/Separate_Last.py $READ1 $NUMPROCS 4 
            rm $READ1

        # START LAST for each of the NUMPROCS new -split files
            echo "START Paired End LAST READ 1 [`date`]" >>$MYLOG
            for ((I=0; I<$NUMPROCS; I++))
            do
                    READS=${I}-split.fq

                    lastal \
                        -l 25 \
                        -Q 3 \
                        $LASTREF \
                        $READS \
                        2>>$MYLOG \
                        >${I}_last.maf &
            done
            wait

            echo "FINISH Paired End LAST READ 1 [`date`]" >>$MYLOG

            cat *_last.maf > read1.maf
            rm *_last.maf *-split.fq

        # The following Python script turns READS into NUMPROCS separate files, going from 0-split.fq to (NUMPROCS-1)-split.fq. 
        # READS is the location where the output files are placed

            python /bio/mcintyre/pipeline_dev/scripts/Separate_Last.py $READ2 $NUMPROCS 4 
            rm $READ2

        # START LAST for each of the NUMPROCS new -split files
            echo "START Paired End LAST READ 2 [`date`]" >>$MYLOG
            for ((I=0; I<$NUMPROCS; I++))
            do
                    READS=${I}-split.fq

                    lastal \
                        -l 25 \
                        -Q 3 \
                        $LASTREF \
                        $READS \
                        2>>$MYLOG \
                        >${I}_last.maf &
            done
            wait

            echo "FINISH Paired End LAST READ 2 [`date`]" >>$MYLOG

            cat *_last.maf > read2.maf
            rm *_last.maf *-split.fq

        # Combine Reads
            echo "START Combining Paired End  MAFs [`date`]" >>$MYLOG
                last-pair-probs.py -r read1.maf read2.maf > ${NAME}_last.maf 2>>$MYLOG
            echo "FINISH Combining Paired End  MAFs [`date`]" >>$MYLOG

        # Convert MAF to SAM
            echo "START Converting from MAF to SAM [`date`]" >>$MYLOG
                maf-convert.py sam ${NAME}_last.maf > ${NAME}_last.sam 2>>$MYLOG 
            echo "FINISH Converting to SAM [`date`]" >>$MYLOG

        # PARSE LAST FILES
            echo "START Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG
            perl /bio/mcintyre/sem_gof/scripts/parse_last_sam_v2.pl \
                ${NAME}_last.sam \
                ${NAME}_ambig_last.sam \
                ${NAME}_uniq_last.sam \
                > $ALNLOGS/${NAME}_LAST.log

            rm ${NAME}_last.sam 

            echo "FINISH Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG

    }

## Start Alignment Pipeline

    printf "<------------------- STARTING SE alignment process for $NAME [`date`] ------------------->\n" >> $MYLOG
    READ1=$ORIG/${LINE}/${MV}${REP}/$NAME.1.1.txt
    READ2=$ORIG/${LINE}/${MV}${REP}/$NAME.1.2.txt
    READS=$TMPDIR/$NAME.fq
    cat $READ1 $READ2 > $READS

    bowtie_se_all
    last_se_all

## File Check
    cd $TMPDIR
    echo "FILE SIZE CHECK">>$MYLOG
    du -sh *.sam >>$MYLOG

## Combine all Sam files 
    echo "START Combine SAM files">>$MYLOG
    cat *.sam >$OUTPUT/${NAME}.sam 2>>$MYLOG
    echo "FINISH Combining SAM files [`date`]" >>$MYLOG

## Remove TMPDIR if on SCRATCH
    DEL_TMP=1
    if [[ $FLAG_SCRATCH -eq 1 && $DEL_TMP -eq 1 ]]
    then
        cd ~
        rm -r $TMPDIR
    fi

echo "Script complete, [`date`]" >>$MYLOG
