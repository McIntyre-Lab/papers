#!/bin/bash
#PBS -M jfear@ufl.edu
#PBS -m n
#PBS -q bio
#PBS -r n
#PBS -j oe
#PBS -o /bio/mcintyre/cegs/scripts/PBS_LOGS/aln_fb551_transcriptome/
#PBS -l walltime=11:00:00
#PBS -l nodes=1:ppn=4
#PBS -l pmem=8gb
##PBS -t 1-342%50
#PBS -t 184
#342

module load bowtie/0.12.8
module load last/247
module load python/2.7.3

## Set current USERNAME who is running the script
    USER=jfear

## Store number of processors that will be used, i.e. the number of files we will split into to run LAST on
    NUMPROCS=4

## Set Directories
    PROJ=/bio/mcintyre/cegs
    ORIG=$PROJ/original_data/transcriptome
 
## Because I am using an PBS Array I am pulling LINE:MV:REP:TECH_REP from an external CSV with all possible combinations
    DESIGN_FILE=$PROJ/design_files/CEGS_57_lines_no_tech.txt
    DESIGN=$(sed -n "${PBS_ARRAYID}p" $DESIGN_FILE)

    IFS=',' read -ra ARRAY <<< "$DESIGN"

    LINE=${ARRAY[0]}
    MV=${ARRAY[1]}
    REP=${ARRAY[2]}

    NAME=${LINE}_${MV}${REP}

## Set Different References
    REF=/bio/mcintyre/references/dmel_fb551/dmel-all-transcript-r5.51_BT1
    LASTREF=/bio/mcintyre/references/dmel_fb551/dmel-all-transcript-r5.51_LAST

## Create Necessary Folders
    OUTPUT=$PROJ/aln_fb551_transcriptome
    if [ ! -e $OUTPUT ]; then mkdir -p $OUTPUT; fi

    # Create LOG directory and start log
        LOGS=$OUTPUT/job_logs 
        ALN_ERROR_LOG=$LOGS/size_errors.txt
        if [ ! -d $LOGS ]; then mkdir -p $LOGS; fi

        MYLOG=$LOGS/${LINE}_${MV}${REP}.log
        printf "`date` $LINE $MV $REP PBS_ARRAYID:$PBS_ARRAYID HOSTNAME:$HOSTNAME\n" > $MYLOG

    # Select TMPDIR
        # Create a temporary folder to do everything in. If you comment this section
        # out, script will use node's local TMPDIR
        SIZE=`df /local/scratch/ | grep -v "Filesystem" | awk '{print $4}'`
        FLAG_SCRATCH=0
        #SIZE=1

        if [ $SIZE -lt 20000000 ]
        then 
            echo "TMPDIR full, moving to SCRATCH">>$MYLOG
            TMPDIR=/scratch/hpc/$USER/tmp/aln_fb551_transcriptome_$PBS_ARRAYID
            if [ ! -d $TMPDIR ]; then mkdir -p $TMPDIR; fi
            FLAG_SCRATCH=1
        fi

    # Create ALN LOG directory and start log
        ALNLOGS=$OUTPUT/aln_logs 
        if [ ! -d $ALNLOGS ]; then mkdir -p $ALNLOGS; fi
        printf "\----tmpdir: $TMPDIR \n"> $MYLOG


### FUNCTIONS FOR ALIGNMENT PIPELINE ###
# I have created a separate file that hold the alignment functions
source $PROJ/scripts/alignment_functions.sh

## Start Alignment Pipeline
    printf "<------------------- STARTING SE alignment process for $NAME [`date`] ------------------->\n" >> $MYLOG
    READS=$TMPDIR/$NAME.fq
    cat $ORIG/${LINE}/${MV}${REP}/${NAME}*.txt > $READS

    qual=`python /scratch/lfs/mcintyre/python.git/identify_quality.py -i $READS`
    if [ $qual == 'phred64' ]; 
    then 
        # set to old illumina quality scores phred64/solexa 1.3
        btqual='--phred64-quals'
        lastqual='3'
    else
        # change to sanger format which is what all new illumina data is
        btqual='--phred33-quals'
        lastqual='1'
    fi

    bowtie_se_all
    last_se_all

## File Check
    cd $TMPDIR
    echo "FILE SIZE CHECK">>$MYLOG
    du -sh *.sam >>$MYLOG

## Combine all Sam files 
    echo "START Combine SAM files">>$MYLOG
    cat *.sam >$OUTPUT/${NAME}.sam 2>>$MYLOG
    echo "FINISH Combining SAM files [`date`]" >>$MYLOG

## Remove TMPDIR if on SCRATCH
    DEL_TMP=1
    if [[ $FLAG_SCRATCH -eq 1 && $DEL_TMP -eq 1 ]]
    then
        cd ~
        rm -r $TMPDIR
    fi

echo "Script complete, [`date`]" >>$MYLOG
