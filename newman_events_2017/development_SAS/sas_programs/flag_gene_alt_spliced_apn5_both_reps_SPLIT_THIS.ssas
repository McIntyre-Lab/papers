ods listing; ods html close;
libname mm10 '!MCLAB/useful_mouse_data/mm10/sas_data';
libname event '!MCLAB/event_analysis/sas_data';
libname evspl '!MCLAB/conesa_pacbio/sas_data/splicing';
libname conesa '!MCLAB/conesa_pacbio/sas_data';
libname refseq '!MCLAB/event_analysis/refseq_fusions/sas_data';




/* Comparison of alternatively spliced genes between Event Analysis and PacBio

I want to compare:
(1) Genes that have multiple exons, have exons in both NPCs and OLD and have exons in either NPCs or OLDs
- to -
(2) Genes with multiple PB isoforms, have PB isoforms in both NPCs and OLDs and have isoforms in either NPCs or OLDs

This is the "Event Analysis AS genes" vs. "PacBio AS genes" comparison

Genes that have only one exon cannot be alternatively spliced
Genes that are only detected in one cell type are cell-specific genes and not AS

PB genes with only 1 isoform cannot be AS
PB genes with isoforms only in one cell type are cell-specific and not AS

I need to do this for APN>=5 in both reps

*/

/*******************************************************************************/


data set_group;
  length cell_type $3.;
  set event.mm10_refseq_splicing_counts;
  if sample_id in ('NSC1','NSC2') then cell_type="NSC";
  if sample_id in ('OLD1','OLD2') then cell_type="OLD";
  keep sample_id cell_type event_id apn;
run;

data flag_event_apn_gt0;
  set set_group;
  if apn ge 5 then flag_event_apn_gt0=1;
  else flag_event_apn_gt0=0;
run;


proc sort data=flag_event_apn_gt0;
  by cell_type event_id;
proc means data=flag_event_apn_gt0 noprint;
  by cell_type event_id;
  var flag_event_apn_gt0;
  output out=mean_on mean=mean_gt0;
run;

data nsc old;
  set mean_on;
  if cell_type="NSC" then output nsc;
  else output old;
run;

data flag_on_nsc;
  set nsc;
  if mean_gt0 =1 then flag_event_nsc_on=1;
  else if mean_gt0 =0 then flag_event_nsc_on=0;
  else flag_event_nsc_on=.;
  keep event_id flag_event_nsc_on;
run;

data flag_on_old;
  set old;
  if mean_gt0 =1 then flag_event_old_on=1;
  else if mean_gt0 =0 then flag_event_old_on=0;
  else flag_event_old_on=.;
  keep event_id flag_event_old_on;
run;

proc sort data=flag_on_nsc;
   by event_id;
proc sort data=flag_on_old;
   by event_id;
run;

data flag_event_on;
   merge flag_on_nsc (in=in1) flag_on_old (in=in2);
   by event_id;
   if in1 and in2;
run;

data event.flag_splicing_on_apn5;
   set flag_event_on;
run;


/*******************************************************************************/


/* Count the number of exonic regions, exon fragments and junctions per gene:
(1) In total
(2) Detected in both
(3) Detected in NPCs only
(4) Detected in OLDs only
*/

/* For each gene, count fragments that are on in both, NPCs only, OLDs only, or off */

data flag_frag_dd;
   set event.flag_fragment_on_apn5;
   if flag_fragment_nsc_on=. and flag_fragment_old_on=. then delete;
   if flag_fragment_nsc_on=0 and flag_fragment_old_on=. then delete;
   if flag_fragment_nsc_on=. and flag_fragment_old_on=0 then delete;
   if flag_fragment_nsc_on=1 and flag_fragment_old_on=1 then flag_frag_both=1; else flag_frag_both=0;
   if flag_fragment_nsc_on=1 and flag_fragment_old_on ne 1 then flag_frag_npc=1; else flag_frag_npc=0;
   if flag_fragment_nsc_on ne 1 and flag_fragment_old_on=1 then flag_frag_old=1; else flag_frag_old=0;
   if flag_fragment_nsc_on=0 and flag_fragment_old_on=0 then flag_frag_off=1; else flag_frag_off=0;
   keep fragment_id flag_frag_both flag_frag_npc flag_frag_old flag_frag_off;
run;

data frag2keep;
   set event.flagged_fragment_length;
   where flag_fragment_lt_min_bp=0;
   keep fragment_id;
run;

proc sort data=frag2keep;
  by fragment_id;
proc sort data=flag_frag_dd;
  by fragment_id;
run;

data flag_frag_dd2;
   merge flag_frag_dd (in=in1) frag2keep (in=in2);
   by fragment_id;
   if in1 and in2;
run;


data frag2gene;
  set mm10.mm10_fragment2exon2gene;
  keep fragment_id gene_id;
run;

data gene_exp;
   set event.flag_gene_expressed;
   where flag_gene_expressed=1;
   keep gene_id;
run;

proc sort data=frag2gene nodup;
   by gene_id fragment_id;
proc sort data=gene_exp;
   by gene_id;
run;

data frag2gene2;
  merge frag2gene (in=in1) gene_exp (in=in2);
  by gene_id;
  if in1 and in2;
run;

proc sort data=frag2gene2;
   by fragment_id;
proc sort data=flag_frag_dd2;
   by fragment_id;
run;

data flag_frag_dd3;
  merge flag_frag_dd2 (in=in1) frag2gene2 (in=in2);
  by fragment_id;
  if in1 and in2;
  flag_frag=1;
run;

proc sort data=flag_frag_dd3;
   by gene_id;
proc means data=flag_frag_dd3 noprint;
   by gene_id;
   var flag_frag_both flag_frag_npc flag_frag_old flag_frag_off flag_frag;
   output out=frag_on_counts sum(flag_frag_both)=num_fragments_both
                             sum(flag_frag_npc)=num_fragments_npc
                             sum(flag_frag_old)=num_fragments_old
                             sum(flag_frag_off)=num_fragments_off
                             sum(flag_frag)=num_fragments_total;
run;

/* Make permenant */

data event.genes_frags_on_by_cell_apn5;
  set frag_on_counts;
  drop _TYPE_ _FREQ_;
run;



/*******************************************************************************/


/* For each gene, count fusions that are on in both, NPCs only, OLDs only, or off */

data flag_fusion_dd;
   set event.flag_fusion_on_apn5;
   if flag_fusion_nsc_on=. and flag_fusion_old_on=. then delete;
   if flag_fusion_nsc_on=0 and flag_fusion_old_on=. then delete;
   if flag_fusion_nsc_on=. and flag_fusion_old_on=0 then delete;
   if flag_fusion_nsc_on=1 and flag_fusion_old_on=1 then flag_fusion_both=1; else flag_fusion_both=0;
   if flag_fusion_nsc_on=1 and flag_fusion_old_on ne 1 then flag_fusion_npc=1; else flag_fusion_npc=0;
   if flag_fusion_nsc_on ne 1 and flag_fusion_old_on=1 then flag_fusion_old=1; else flag_fusion_old=0;
   if flag_fusion_nsc_on=0 and flag_fusion_old_on=0 then flag_fusion_off=1; else flag_fusion_off=0;
   keep fusion_id flag_fusion_both flag_fusion_npc flag_fusion_old flag_fusion_off;
run;

data fusion2keep;
   set event.flagged_fusion_length;
   where flag_fusion_lt_min_bp=0;
   keep fusion_id;
run;

proc sort data=fusion2keep;
  by fusion_id;
proc sort data=flag_fusion_dd;
  by fusion_id;
run;

data flag_fusion_dd2;
   merge flag_fusion_dd (in=in1) fusion2keep (in=in2);
   by fusion_id;
   if in1 and in2;
run;


data fusion2gene;
  set mm10.mm10_refseq_fusion_si_info_v2;
  keep fusion_id primary_gene_id;
  rename primary_gene_id=gene_id;
run;

data gene_exp;
   set event.flag_gene_expressed;
   where flag_gene_expressed=1;
   keep gene_id;
run;

proc sort data=fusion2gene nodup;
   by gene_id fusion_id;
proc sort data=gene_exp;
   by gene_id;
run;

data fusion2gene2;
  merge fusion2gene (in=in1) gene_exp (in=in2);
  by gene_id;
  if in1 and in2;
run;

proc sort data=fusion2gene2;
   by fusion_id;
proc sort data=flag_fusion_dd2;
   by fusion_id;
run;

data flag_fusion_dd3;
  merge flag_fusion_dd2 (in=in1) fusion2gene2 (in=in2);
  by fusion_id;
  if in1 and in2;
  flag_fusion=1;
run;

proc sort data=flag_fusion_dd3;
   by gene_id;
proc means data=flag_fusion_dd3 noprint;
   by gene_id;
   var flag_fusion_both flag_fusion_npc flag_fusion_old flag_fusion_off flag_fusion;
   output out=fusion_on_counts sum(flag_fusion_both)=num_fusions_both
                             sum(flag_fusion_npc)=num_fusions_npc
                             sum(flag_fusion_old)=num_fusions_old
                             sum(flag_fusion_off)=num_fusions_off
                             sum(flag_fusion)=num_fusions_total;
run;


data check;
  set fusion_on_counts;
  if num_fusions_both+num_fusions_npc+num_fusions_old+num_fusions_off = num_fusions_total then delete;
run;

/* Make permenant */

data event.genes_fusions_on_by_cell_apn5;
  set fusion_on_counts;
  drop _TYPE_ _FREQ_;
run;

/*******************************************************************************/

data flag_event_dd;
   set event.flag_splicing_on_apn5;
   if flag_event_nsc_on=. and flag_event_old_on=. then delete;
   if flag_event_nsc_on=0 and flag_event_old_on=. then delete;
   if flag_event_nsc_on=. and flag_event_old_on=0 then delete;
   if flag_event_nsc_on=1 and flag_event_old_on=1 then flag_event_both=1; else flag_event_both=0;
   if flag_event_nsc_on=1 and flag_event_old_on ne 1 then flag_event_npc=1; else flag_event_npc=0;
   if flag_event_nsc_on ne 1 and flag_event_old_on=1 then flag_event_old=1; else flag_event_old=0;
   if flag_event_nsc_on=0 and flag_event_old_on=0 then flag_event_off=1; else flag_event_off=0;
   keep event_id flag_event_both flag_event_npc flag_event_old flag_event_off;
run;

data event2keep;
   set event.flagged_event_length;
   where flag_event_short=0;
   keep event_id;
run;

proc sort data=event2keep;
  by event_id;
proc sort data=flag_event_dd;
  by event_id;
run;

data flag_event_dd2;
   merge flag_event_dd (in=in1) event2keep (in=in2);
   by event_id;
   if in1 and in2;
run;


data event2gene;
  set evspl.splicing_events_annot_refseq;
  keep event_id gene_id;
run;


data gene_exp;
   set event.flag_gene_expressed;
   where flag_gene_expressed=1;
   keep gene_id;
run;

proc sort data=event2gene nodup;
   by gene_id event_id;
proc sort data=gene_exp;
   by gene_id;
run;

data event2gene2;
  merge event2gene (in=in1) gene_exp (in=in2);
  by gene_id;
  if in1 and in2;
run;

proc sort data=event2gene2;
   by event_id;
proc sort data=flag_event_dd2;
   by event_id;
run;

data flag_event_dd3;
  merge flag_event_dd2 (in=in1) event2gene2 (in=in2);
  by event_id;
  if in1 and in2;
  flag_event=1;
run;

proc sort data=flag_event_dd3;
   by gene_id;
proc means data=flag_event_dd3 noprint;
   by gene_id;
   var flag_event_both flag_event_npc flag_event_old flag_event_off flag_event;
   output out=junc_on_counts sum(flag_event_both)=num_junc_both
                             sum(flag_event_npc)=num_junc_npc
                             sum(flag_event_old)=num_junc_old
                             sum(flag_event_off)=num_junc_off
                             sum(flag_event)=num_junc_total;
run;


data check;
  set junc_on_counts;
  if num_junc_both+num_junc_npc+num_junc_old+num_junc_off = num_junc_total then delete;
run;

/* Make permenant */

data event.genes_junctions_on_by_cell_apn5;
  set junc_on_counts;
  drop _TYPE_ _FREQ_;
run;

/*******************************************************************************/



/* Merge fragment/fusion/splicing counts and flag if:
-gene is cell-specific
-gene has only 1 exon
-gene is alternatively spliced
*/

data frags;
   set event.genes_frags_on_by_cell_apn5;
run;
data fusions;
   set event.genes_fusions_on_by_cell_apn5;
run;
data juncs;
   set event.genes_junctions_on_by_cell_apn5;
run;

proc sort data=frags;
  by gene_id;
proc sort data=fusions;
  by gene_id;
proc sort data=juncs;
  by gene_id;
run;

data all_counts_by_gene;
  merge  fusions frags juncs ;
   by gene_id;
run;

/* Flag if gene is cell-specific, 1 exon, is AS, etc. */

data flag_gene_exp;
   set all_counts_by_gene;
   /* Flag if single exon gene */
   if num_fusions_total=1 then flag_single_fusion_gene=1; else flag_single_fusion_gene=0;
   if num_fragments_total=1 then flag_single_fragment_gene=1; else flag_single_fragment_gene=0;
run;

data flag_gene_dd_fusions;
   set flag_gene_exp;
  /* Flag if gene expression is cell specific or if alternatively spliced */
  *fusions;
  if num_fusions_both > 0 and num_fusions_npc > 0 and num_fusions_old > 0 then do;
       flag_gene_fusions_as=1;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both > 0 and num_fusions_npc = 0 and num_fusions_old > 0 then do;
       flag_gene_fusions_as=1;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both > 0 and num_fusions_npc > 0 and num_fusions_old = 0 then do;
       flag_gene_fusions_as=1;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both > 0 and num_fusions_npc = 0 and num_fusions_old = 0 then do;
       flag_gene_fusions_as=0;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both = 0 and num_fusions_npc > 0 and num_fusions_old > 0 then do;
       flag_gene_fusions_as=1;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both = 0 and num_fusions_npc = 0 and num_fusions_old > 0 then do;
       flag_gene_fusions_as=0;
       flag_gene_fusions_specific=1;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both = 0 and num_fusions_npc > 0 and num_fusions_old = 0 then do;
       flag_gene_fusions_as=0;
       flag_gene_fusions_specific=1;
       flag_gene_fusions_off=0;
       end;
  if num_fusions_both = 0 and num_fusions_npc = 0 and num_fusions_old = 0 then do;
       flag_gene_fusions_as=0;
       flag_gene_fusions_specific=0;
       flag_gene_fusions_off=1;
       end;
run;



data flag_gene_dd_frags;
   set flag_gene_dd_fusions;
  /* Flag if gene expression is cell specific or if alternatively spliced */
  *fragments;
  if num_fragments_both > 0 and num_fragments_npc > 0 and num_fragments_old > 0 then do;
       flag_gene_fragments_as=1;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both > 0 and num_fragments_npc = 0 and num_fragments_old > 0 then do;
       flag_gene_fragments_as=1;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both > 0 and num_fragments_npc > 0 and num_fragments_old = 0 then do;
       flag_gene_fragments_as=1;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both > 0 and num_fragments_npc = 0 and num_fragments_old = 0 then do;
       flag_gene_fragments_as=0;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both = 0 and num_fragments_npc > 0 and num_fragments_old > 0 then do;
       flag_gene_fragments_as=1;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both = 0 and num_fragments_npc = 0 and num_fragments_old > 0 then do;
       flag_gene_fragments_as=0;
       flag_gene_fragments_specific=1;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both = 0 and num_fragments_npc > 0 and num_fragments_old = 0 then do;
       flag_gene_fragments_as=0;
       flag_gene_fragments_specific=1;
       flag_gene_fragments_off=0;
       end;
  if num_fragments_both = 0 and num_fragments_npc = 0 and num_fragments_old = 0 then do;
       flag_gene_fragments_as=0;
       flag_gene_fragments_specific=0;
       flag_gene_fragments_off=1;
       end;
run;


data flag_gene_dd_juncs;
   set flag_gene_dd_frags;
  /* Flag if gene expression is cell specific or if alternatively spliced */
  *splicing ;
   if num_junc_total > 0 then do;
  if num_junc_both > 0 and num_fragments_npc > 0 and num_fragments_old > 0 then do;
       flag_gene_junc_as=1;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=0;
       end;
  if num_junc_both > 0 and num_junc_npc = 0 and num_junc_old > 0 then do;
       flag_gene_junc_as=1;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=0;
       end;
  if num_junc_both > 0 and num_junc_npc > 0 and num_junc_old = 0 then do;
       flag_gene_junc_as=1;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=0;
       end;
  if num_junc_both > 0 and num_junc_npc = 0 and num_junc_old = 0 then do;
       flag_gene_junc_as=0;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=0;
       end;
  if num_junc_both = 0 and num_junc_npc > 0 and num_junc_old > 0 then do;
       flag_gene_junc_as=1;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=0;
       end;
  if num_junc_both = 0 and num_junc_npc = 0 and num_junc_old > 0 then do;
       flag_gene_junc_as=0;
       flag_gene_junc_specific=1;
       flag_gene_junc_off=0;
       end;
  if num_junc_both = 0 and num_junc_npc > 0 and num_junc_old = 0 then do;
       flag_gene_junc_as=0;
       flag_gene_junc_specific=1;
       flag_gene_junc_off=0;
       end;
  if num_junc_both = 0 and num_junc_npc = 0 and num_junc_old = 0 then do;
       flag_gene_junc_as=0;
       flag_gene_junc_specific=0;
       flag_gene_junc_off=1;
       end;
  end;
run;


/* Count genes that are cell-specifically expressed or alternatively spliced */

proc freq data=flag_gene_dd_juncs noprint;
   tables flag_single_fusion_gene*flag_gene_fusions_as*flag_gene_fusions_specific*flag_gene_fusions_off / out=gene_counts_fus;
proc print data=gene_counts_fus;
run;

/*
                               flag_gene_    flag_gene_
 flag_single_    flag_gene_     fusions_      fusions_
  fusion_gene    fusions_as     specific         off       COUNT    PERCENT

       0              0             0             0         8600    41.1976
       0              0             1             0         2469    11.8275
       0              1             0             0         7975    38.2036
       1              0             0             0         1429     6.8455
       1              0             1             0          402     1.9257


                                flag_gene_    flag_gene_
  flag_single_    flag_gene_     fusions_      fusions_
   fusion_gene    fusions_as     specific         off       COUNT    PERCENT

        0              .             .             .           20      .
        0              0             0             0         3473    16.7084
        0              0             0             1        10957    52.7134
        0              0             1             0         1642     7.8995
        0              1             0             0         2840    13.6630

        1              0             0             0          366     1.7608
        1              0             0             1         1385     6.6631
        1              0             1             0          123     0.5917

123 genes are single-exon genes and have cell-specific expression
1385 genes that are single-fusion and gene is off at APN5
366 genes are single-exons genes but are expressed in both cell types

1642 genes have multiple exons and have cell-specific expression
10957 genes with multiple exons, but are not expressed at APN5

3473 genes are expressed in both cell types but are not alternatively spliced
2480 genes are expressed in both cell types and are alternatively spliced

So, based on fusion-level info 2480/(2480+3473) genes (42%) are alternatively spliced
Or if counting all genes, about 14% 

*/


proc freq data=flag_gene_dd_juncs noprint;
   tables flag_single_fragment_gene*flag_gene_fragments_as*flag_gene_fragments_specific*flag_gene_fragments_off / out=gene_counts_frags;
proc print data=gene_counts_frags;
run;

/*

flag_single_    flag_gene_    flag_gene_    flag_gene_
  fragment_     fragments_    fragments_    fragments_
    gene            as         specific         off       COUNT    PERCENT

      0              .             .             .           14      .
      0              0             0             0         3211    15.4434
      0              0             0             1        10944    52.6356
      0              0             1             0         1678     8.0704
      0              1             0             0         3225    15.5108
      1              0             0             0          330     1.5871
      1              0             0             1         1290     6.2043
      1              0             1             0          114     0.5483

3211 genes are expressed in both cell types but are not alternatively spliced
3225 genes are expressed in both cell types and are alternatively spliced

So, based on fragment-level info 3225/(3225+3211) genes (50%) are alternatively spliced
Or if counting all genes, about 16% of genes
*/


proc freq data=flag_gene_dd_juncs noprint;
   tables flag_single_fragment_gene*flag_gene_junc_as*flag_gene_junc_specific*flag_gene_junc_off / out=gene_counts_junc;
proc print data=gene_counts_junc;
run;

/*

 flag_single_     flag_                        flag_
   fragment_      gene_       flag_gene_       gene_
     gene        junc_as    junc_specific    junc_off    COUNT    PERCENT

       0            .             .              .         410      .
       0            0             0              0        2216    11.8180
       0            0             0              1       12726    67.8684
       0            0             1              0        1515     8.0796
       0            1             0              0        2205    11.7594
       1            .             .              .        1645      .
       1            0             0              0           2     0.0107
       1            0             0              1          82     0.4373
       1            0             1              0           3     0.0160
       1            1             0              0           2     0.0107


Of genes with junctions:

2205 genes are expressed in both cell types and are alternatively spliced
2216 genes are expressed in both cell types but are not alternatively spliced

So, based on fragment-level info 2205/(2205+2216) genes (50%) are alternatively spliced
Or if counting all genes, about 12% of genes
*/

/* Make permenant -- think I will use the fusion-level data only for determining if a gene is AS or not */

data event.genes_all_events_on_by_cell_apn5;
   set flag_gene_dd_juncs;
run;



/*******************************************************************************/


/* Overlap between Event AS (APN>0) and PacBio AS, add in a flag for the 1115 MISO genes */

* flag Event Gene if only one annotated transcript;

data miso_1115;
  set event.miso_refseq_exonskip_cmpr_dtct;
  if flag_has_miso_se=1 and flag_has_miso_se_dtct=1 and flag_has_refseq=1 and flag_has_multiple_exons=1;
  keep gene_id;
run;


data gene2xs;
  set event.feature2xs2gene_exp_only_nomulti;
  keep transcript_id gene_id;
run;

proc sort data=gene2xs nodup;
  by gene_id transcript_id;
proc freq data=gene2xs noprint;
  tables gene_id / out =xs_count;
run;

data flag_1iso_gene;
  set xs_count;
  if count=1 then flag_single_xs_gene=1;
  else flag_single_xs_gene=0;
  keep gene_id flag_single_xs_gene;
run;

data event_as;
  set event.genes_all_events_on_by_cell;
  flag_gene_single_exon=flag_single_fusion_gene;
  flag_gene_specific=flag_gene_fusions_specific;
  flag_gene_off=flag_gene_fusions_off;
  if sum(num_fusions_old,num_fusions_npc,num_fusions_both)=1 then flag_gene_single_exon_dtct=1;
  else flag_gene_single_exon_dtct=0;
  if flag_Gene_specific=0 and flag_gene_junc_specific=1 then flag_gene_as=1;
  else if flag_gene_fragments_as=1 or flag_gene_junc_as=1 then flag_gene_as=1;
  else flag_gene_as=0;
  keep gene_id flag_gene_single_exon flag_gene_off flag_gene_specific flag_gene_single_exon_dtct flag_gene_as;
run;

proc sort data=event_as;
  by gene_id;
proc sort data=miso_1115 nodup;
  by gene_id;
proc sort data=flag_1iso_gene;
  by gene_id;
run;


data event_as2;
  merge event_as (in=in1) flag_1iso_gene (in=in2) miso_1115 (in=in3);
  by gene_id;
  if in3 then flag_gene_miso_1115=1; 
  else flag_gene_miso_1115=0;
  if in1 and in2;
run;


data pb2refseq_as1;
   set event.pb2refseq_flag_gene_alt_spliced;
   keep gene_id flag_pb2rs_single_iso_gene flag_pb2rs_gene_as flag_pb2rs_gene_specific;
run;


data pb2refseq_as2;
   set event.pb2refseq_flag_gene_alt_spliced;
   if num_pb_genes > 1 then delete;
   keep gene_id flag_pb_single_iso_gene flag_pb_gene_as flag_pb_gene_specific;
run;

proc sort data=event_as2;
  by gene_id;
proc sort data=pb2refseq_as1;
  by gene_id;
proc sort data=pb2refseq_as2;
  by gene_id;
run;

data overlap1;
  merge event_as2 (in=in1) pb2refseq_as1 (in=in2);
  by gene_id;
  if in1 and in2;
run; *4719 genes in common;

data overlap2;
  merge event_as2 (in=in1) pb2refseq_as2 (in=in2);
  by gene_id;
  if in1 and in2;
run;  *4561 genes in common;

proc freq data=overlap1 noprint;
  tables flag_gene_single_exon*flag_gene_off*flag_gene_specific*flag_single_xs_gene*
         flag_gene_single_exon_dtct*flag_pb2rs_single_iso_gene*
         flag_pb2rs_gene_specific*flag_gene_as*flag_pb2rs_gene_as*flag_gene_miso_1115 / out=pb2event_check1;
run;

proc export data=pb2event_check1 outfile="!MCLAB/event_analysis/analysis_output/pacbio_vs_events_alt_splicing_overlap_no_pb2multi_refseq_w_miso_genes.csv"
  dbms=csv replace;
run;


proc freq data=overlap2 noprint;
  tables flag_gene_single_exon*flag_gene_off*flag_gene_specific*flag_single_xs_gene*
         flag_gene_single_exon_dtct*flag_pb_single_iso_gene*
         flag_pb_gene_specific*flag_gene_as*flag_pb_gene_as*flag_gene_miso_1115 / out=pb2event_check2;
run;

proc export data=pb2event_check1 outfile="!MCLAB/event_analysis/analysis_output/pacbio_vs_events_alt_splicing_overlap_no_refseq2multi_pb_w_miso_genes.csv"
  dbms=csv replace;
run;


/******************************************************************************************/


/* Overlap between Event AS (APN>=5) and PacBio AS, add in a flag for the 1115 MISO genes */

* flag Event Gene if only one annotated transcript;

data miso_1115;
  set event.miso_refseq_exonskip_cmpr_dtct;
  if flag_has_miso_se=1 and flag_has_miso_se_dtct=1 and flag_has_refseq=1 and flag_has_multiple_exons=1;
  keep gene_id;
run;


data gene2xs;
  set event.feature2xs2gene_exp_only_nomulti;
  keep transcript_id gene_id;
run;

proc sort data=gene2xs nodup;
  by gene_id transcript_id;
proc freq data=gene2xs noprint;
  tables gene_id / out =xs_count;
run;

data flag_1iso_gene;
  set xs_count;
  if count=1 then flag_single_xs_gene=1;
  else flag_single_xs_gene=0;
  keep gene_id flag_single_xs_gene;
run;

data event_as;
  set event.genes_all_events_on_by_cell_apn5;
  flag_gene_single_exon=flag_single_fusion_gene;
  flag_gene_specific=flag_gene_fusions_specific;
  flag_gene_off=flag_gene_fusions_off;
  if sum(num_fusions_old,num_fusions_npc,num_fusions_both)=1 then flag_gene_single_exon_dtct=1;
  else flag_gene_single_exon_dtct=0;
  if flag_Gene_specific=0 and flag_gene_junc_specific=1 then flag_gene_as=1;
  else if flag_gene_fragments_as=1 or flag_gene_junc_as=1 then flag_gene_as=1;
  else flag_gene_as=0;
  keep gene_id flag_gene_single_exon flag_gene_off flag_gene_specific flag_gene_single_exon_dtct flag_gene_as;
run;

proc sort data=event_as;
  by gene_id;
proc sort data=miso_1115 nodup;
  by gene_id;
proc sort data=flag_1iso_gene;
  by gene_id;
run;

data event_as2;
  merge event_as (in=in1) flag_1iso_gene (in=in2) miso_1115 (in=in3);
  by gene_id;
  if in3 then flag_gene_miso_1115=1; else flag_gene_miso_1115=0;
  if in1 and in2;
run;


data pb2refseq_as1;
   set event.pb2refseq_flag_gene_alt_spliced;
   keep gene_id flag_pb2rs_single_iso_gene flag_pb2rs_gene_as flag_pb2rs_gene_specific;
run;


data pb2refseq_as2;
   set event.pb2refseq_flag_gene_alt_spliced;
   if num_pb_genes > 1 then delete;
   keep gene_id flag_pb_single_iso_gene flag_pb_gene_as flag_pb_gene_specific;
run;

proc sort data=event_as2;
  by gene_id;
proc sort data=pb2refseq_as1;
  by gene_id;
proc sort data=pb2refseq_as2;
  by gene_id;
run;

data overlap1;
  merge event_as2 (in=in1) pb2refseq_as1 (in=in2);
  by gene_id;
  if in1 and in2;
run; *4717 genes in common;

data overlap2;
  merge event_as2 (in=in1) pb2refseq_as2 (in=in2);
  by gene_id;
  if in1 and in2;
run;  *4559 genes in common;

proc freq data=overlap1 noprint;
  tables flag_gene_single_exon*flag_gene_off*flag_gene_specific*flag_single_xs_gene*
         flag_gene_single_exon_dtct*flag_pb2rs_single_iso_gene*
         flag_pb2rs_gene_specific*flag_gene_as*flag_pb2rs_gene_as*flag_gene_miso_1115 / out=pb2event_check1;
run;

proc export data=pb2event_check1 outfile="!MCLAB/event_analysis/analysis_output/pacbio_vs_events_alt_splicing_overlap_no_pb2multi_refseq_w_miso_genes_apn5_both_reps.csv"
  dbms=csv replace;
run;


proc freq data=overlap2 noprint;
  tables flag_gene_single_exon*flag_gene_off*flag_gene_specific*flag_single_xs_gene*
         flag_gene_single_exon_dtct*flag_pb_single_iso_gene*
         flag_pb_gene_specific*flag_gene_as*flag_pb_gene_as*flag_gene_miso_1115 / out=pb2event_check2;
run;

proc export data=pb2event_check1 outfile="!MCLAB/event_analysis/analysis_output/pacbio_vs_events_alt_splicing_overlap_no_refseq2multi_pb_w_miso_genes_apn5_both_reps.csv"
  dbms=csv replace;
run;

