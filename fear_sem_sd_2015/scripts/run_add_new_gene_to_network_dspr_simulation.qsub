#!/bin/sh
#PBS -M jfear@ufl.edu
#PBS -m n
#PBS -r n
#PBS -N e8000
#PBS -q bio
#PBS -o /scratch/lfs/mcintyre/cegs_sem_sd_paper/scripts/PBS_LOGS/dspr_ag
#PBS -e /scratch/lfs/mcintyre/cegs_sem_sd_paper/scripts/PBS_LOGS/dspr_ag
#PBS -l walltime=24:00:00
#PBS -l nodes=1:ppn=8
#PBS -l pmem=1gb
#PBS -t 1-10

# Set Options to handle errors
set -o nounset
set -e

echo "[`date`] Starting Script"

# Move working directory to TMPDIR
cd $TMPDIR

# Number of genes to simulate
NUMGENES=8000

# Load required modules
module load python/2.7.6
module load sas/9.3
module load R/3.0.2

# Set up directories (exporting to env for use with GNU parallel)
export PROJ=/scratch/lfs/mcintyre/cegs_sem_sd_paper
export WORK=$PROJ/dspr_adding_genes_simulation/${NUMGENES}_gene_sim/$PBS_ARRAYID
if [[ ! -e $WORK ]]; then mkdir -p $WORK; fi;

# Run simulation
## Simulation variables
RSCRIPT=$PROJ/scripts/run_dspr_all_simulation.R
TXT=$WORK/simulation_$PBS_ARRAYID.txt
SASFILE=$WORK/simulation_$PBS_ARRAYID.sas

## Use R to generate simulated dataset and output the needed files for sas import
Rscript $RSCRIPT $NUMGENES $TXT $SASFILE

## Add some sas code to the sas code generated by R
cat $PROJ/sas_programs/import_simulation_csv.sas >> $SASFILE

## convert to sas dataset
sas -work $TMPDIR \
    -MEMSIZE 1g \
    -nonews \
    -rsasuser \
    -log $WORK/import_simulation_csv.log \
    -sysin $SASFILE \
    -print /dev/null \
    -sysparm "lib1=$TMPDIR"

# Run adding genes
## Adding Genes function
ag(){
    GENE=gene$1
    # Only add genes that are not in the current network. Search the path
    # file for the current gene, if it is there then skip.
    if grep -qe "$GENE" $PATHFILE; then continue; fi

    # Adding genes variables
    PYSCRIPT=$PROJ/scripts/add_new_gene_to_network.py
    PATHFILE=$PROJ/path_file/dspr_sex_determination_gene_yp2.path
    SASBDAT=$TMPDIR/simulation.sas7bdat

    # Build folder structure
    #echo "[`date`] Building Folder structure"
    SASPROG=$WORK/sas_programs/$GENE
    SASDAT=$WORK/sas_data 
    GENLOG=$WORK/generation_logs        # Generation of SAS scripts
    MODELLOG=$WORK/sem_logs/$GENE       # running SEMs
    COMBLOG=$WORK/cat_logs              # Combining sas datasets together

    for DIR in $SASPROG $SASDAT $MODELLOG $GENLOG $COMBLOG
    do
        if [[ ! -e $DIR ]]; then mkdir -p $DIR; fi;
    done

    # Generate SAS models for GENE
    #echo "[`date`] Generating SEM models for $GENE"
    $PYSCRIPT -p $PATHFILE \
              -l $TMPDIR \
              -m $SASBDAT \
              -o $WORK/sas_programs/$GENE/$GENE.sas \
              -n $GENE \
              -g $GENE \
              --log $GENLOG/model_generation_${GENE}.log

    # Run SAS Models
    #echo "[`date`] Running SEM models for $GENE"
    for MODEL in $WORK/sas_programs/$GENE/$GENE*.sas
    do
        NAME=`basename $MODEL .sas`
        sas -work $TMPDIR \
            -MEMSIZE 1g \
            -nonews \
            -rsasuser \
            -sysin $MODEL \
            -log $MODELLOG/${NAME}.log \
            -print /dev/null
    done

    #echo "[`date`] Combining SEM models for $GENE"
    sas -work $TMPDIR \
        -MEMSIZE 1g \
        -nonews \
        -rsasuser \
        -sysin $PROJ/sas_programs/combine_genome_wide_sem_models.sas \
        -log $COMBLOG/${GENE}.log \
        -print /dev/null \
        -sysparm "lib1=$TMPDIR,lib2=$WORK/sas_data,gene=$GENE"

    # Delete current gene models to prepare for next iteration
    rm gene_$GENE*.sas7bdat
}
## export ag function so that GNU parallel can use it
export -f ag

## Run ag function in parallel jobs up to PBS_NUM_PPN at a time
parallel --max-procs $PBS_NUM_PPN 'ag {}' ::: `seq 1 $NUMGENES`

echo "[`date`] Script complete"
